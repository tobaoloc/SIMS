@page "/Account/Login"

@using System.ComponentModel.DataAnnotations
@using Microsoft.AspNetCore.Authentication
@using Microsoft.AspNetCore.Identity
@using BlazorApp3.Data
@using System.Security.Claims
@using Microsoft.AspNetCore.Authentication.Cookies

@inject SignInManager<ApplicationUser> SignInManager
@inject ILogger<Login> Logger
@inject NavigationManager NavigationManager
@inject IdentityRedirectManager RedirectManager

<PageTitle>Log in</PageTitle>

<h1>Log in</h1>
<div class="container mt-5">
  <div class="row justify-content-center">
    <div class="col-md-6">
      <section class="card shadow-sm">
        <div class="card-body">
          <StatusMessage Message="@errorMessage" />
          <EditForm Model="Input" method="post" OnValidSubmit="LoginUser" FormName="login">
            <DataAnnotationsValidator />
            <h2 class="card-title text-center mb-4">Log in</h2>
            <hr />
            <ValidationSummary class="text-danger" role="alert" />
            <div class="form-floating mb-3">
              <InputText @bind-Value="Input.Email" class="form-control" autocomplete="username" aria-required="true" placeholder="name@example.com" />
              <label for="email" class="form-label">Email</label>
              <ValidationMessage For="() => Input.Email" class="text-danger" />
            </div>
            <div class="form-floating mb-3">
              <InputText type="password" @bind-Value="Input.Password" class="form-control" autocomplete="current-password" aria-required="true" placeholder="password" />
              <label for="password" class="form-label">Password</label>
              <ValidationMessage For="() => Input.Password" class="text-danger" />
            </div>
            <div class="form-check mb-3">
              <InputCheckbox @bind-Value="Input.RememberMe" class="form-check-input" id="rememberMe" />
              <label class="form-check-label" for="rememberMe">
                Remember me
              </label>
            </div>
            <div class="d-grid mb-3">
              <button type="submit" class="btn btn-primary btn-lg">Log in</button>
            </div>
            <div class="text-center">
              <p><a href="Account/ForgotPassword" class="text-decoration-none">Forgot your password?</a></p>
              <p><a href="@(NavigationManager.GetUriWithQueryParameters("Account/Register", new Dictionary<string, object?> { ["ReturnUrl"] = ReturnUrl }))" class="text-decoration-none">Register as a new user</a></p>
              <p><a href="Account/ResendEmailConfirmation" class="text-decoration-none">Resend email confirmation</a></p>
            </div>
          </EditForm>
        </div>
      </section>
    </div>
    <div class="col-md-4">
      <section class="card shadow-sm">
        <div class="card-body">
          <h3 class="card-title text-center mb-4">Use another service to log in</h3>
          <hr />
          <ExternalLoginPicker />
        </div>
      </section>
    </div>
  </div>
</div>
<style>
  body {
    background-color: #f8f9fa;
  }
  
  .card {
    border: none;
    border-radius: 10px;
  }
  
  .card-title {
    color: #333;
    font-weight: 600;
  }
  
  .btn-primary {
    background-color: #007bff;
    border-color: #007bff;
  }
  
  .btn-primary:hover {
    background-color: #0056b3;
    border-color: #0056b3;
  }
  
  .form-control:focus {
    border-color: #80bdff;
    box-shadow: 0 0 0 0.2rem rgba(0, 123, 255, 0.25);
  }
  
  .text-decoration-none {
    color: #007bff;
  }
  
  .text-decoration-none:hover {
    color: #0056b3;
    text-decoration: underline !important;
  }
</style>

@code {
    private string? errorMessage;

    [CascadingParameter]
    private HttpContext HttpContext { get; set; } = default!;

    [SupplyParameterFromForm]
    private InputModel Input { get; set; } = new();

    [SupplyParameterFromQuery]
    private string? ReturnUrl { get; set; }

    protected override async Task OnInitializedAsync()
    {
        if (HttpMethods.IsGet(HttpContext.Request.Method))
        {
            // Clear the existing external cookie to ensure a clean login process
            await HttpContext.SignOutAsync(IdentityConstants.ExternalScheme);
            await HttpContext.SignOutAsync(CookieAuthenticationDefaults.AuthenticationScheme);
        }
    }

    public async Task LoginUser()
    {
        var result = await SignInManager.PasswordSignInAsync(Input.Email, Input.Password, Input.RememberMe, lockoutOnFailure: false);
        if (result.Succeeded)
        {
            Logger.LogInformation("User logged in.");
            var userLogin = await SignInManager.UserManager.FindByEmailAsync(Input.Email);
            if (userLogin != null)
            {
                var claimsIdentity = (ClaimsIdentity)HttpContext.User.Identity;
                if (!claimsIdentity.HasClaim(c => c.Type == "Role"))
                {
                    claimsIdentity.AddClaim(new Claim("Role", userLogin.Role));
                    await HttpContext.SignInAsync(CookieAuthenticationDefaults.AuthenticationScheme, new ClaimsPrincipal(claimsIdentity));
                }
            }

            // Redirect to the /homemain page after successful login
            NavigationManager.NavigateTo("/homemain");
        }
        else if (result.RequiresTwoFactor)
        {
            RedirectManager.RedirectTo(
                "Account/LoginWith2fa",
                new() { ["returnUrl"] = ReturnUrl, ["rememberMe"] = Input.RememberMe });
        }
        else if (result.IsLockedOut)
        {
            Logger.LogWarning("User account locked out.");
            RedirectManager.RedirectTo("Account/Lockout");
        }
        else
        {
            errorMessage = "Error: Invalid login attempt.";
        }
    }

    private sealed class InputModel
    {
        [Required]
        [EmailAddress]
        public string Email { get; set; } = "";

        [Required]
        [DataType(DataType.Password)]
        public string Password { get; set; } = "";

        [Display(Name = "Remember me?")]
        public bool RememberMe { get; set; }
    }
}
