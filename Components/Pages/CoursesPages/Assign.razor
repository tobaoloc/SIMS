@page "/courses/assign"

@using Microsoft.EntityFrameworkCore
@using BlazorApp3.Models
@inject IDbContextFactory<BlazorApp3.Data.ApplicationDbContext> DbFactory
@inject NavigationManager NavigationManager
@inject IJSRuntime JS
@rendermode InteractiveServer
<PageTitle>Assign Student into Course</PageTitle>

<h1>Assign Student into Course</h1>

<div>
    <h4>Courses</h4>
    <hr />
    @if (courses is null)
    {
        <p><em>Loading...</em></p>
    }
    else
    {
        <div class="container mt-5">
            <h4 class="mb-4">Course Details</h4>
            <div class="row">
                <div class="col-md-6">
                    <dl class="row">
                        <dt class="col-sm-4">Name</dt>
                        <dd class="col-sm-8">@courses.Name</dd>
                        <dt class="col-sm-4">Start Date</dt>
                        <dd class="col-sm-8">@courses.StartDate.ToShortDateString()</dd>
                        <dt class="col-sm-4">End Date</dt>
                        <dd class="col-sm-8">@courses.EndDate.ToShortDateString()</dd>
                        <dt class="col-sm-4">Semester</dt>
                        <dd class="col-sm-8">@courses.Semester.Name</dd>
                        <dt class="col-sm-4">Lecture</dt>
                        <dd class="col-sm-8">@courses.Lecture.Name</dd>
                        <dt class="col-sm-4">Subject</dt>
                        <dd class="col-sm-8">@courses.Subject.Name</dd>
                    </dl>
                </div>
                <div class="col-md-6">
                    <h4 class="mb-4">Enroll Student into Course</h4>
                    <div class="form-group mb-3">
                        <label for="studentSelect">Select Student</label>
                        <select id="studentSelect" multiple class="form-control">
                            <!-- Options will be dynamically populated -->
                        </select>
                    </div>
                    <button class="btn btn-primary" @onclick="EnrollStudents">Enroll</button>
                </div>
            </div>
        </div>

        <style>
            .container {
                background-color: #fff;
                border-radius: 8px;
                padding: 1.5rem;
                box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
            }

            h4 {
                color: #333;
                font-weight: 600;
            }

            .form-group label {
                font-weight: 500;
            }

            .form-control:focus {
                border-color: #80bdff;
                box-shadow: 0 0 0 0.2rem rgba(0, 123, 255, 0.25);
            }

            .btn-primary {
                background-color: #007bff;
                border-color: #007bff;
            }

                .btn-primary:hover {
                    background-color: #0056b3;
                    border-color: #0056b3;
                }

                .btn-primary:focus, .btn-primary.focus {
                    box-shadow: 0 0 0 0.2rem rgba(38, 143, 255, 0.5);
                }
        </style>

    }
    <hr />
    <h3>Lists of student enrolled</h3>
    <div class="container mt-4">
        <h4 class="mb-4">Enrolled Students</h4>
        <table class="table table-bordered table-striped">
            <thead class="thead-dark">
                <tr>
                    <th class="text-center">No</th>
                    <th class="text-center">Code</th>
                    <th class="text-center">Name</th>
                    <th class="text-center">Email</th>
                    <th class="text-center">Action</th>
                </tr>
            </thead>
            <tbody>
                @if (StudentCourses != null && StudentCourses.Count > 0)
                {
                    int i = 1;
                    @foreach (StudentCourse student in StudentCourses)
                    {
                        <tr>
                            <td class="text-center">@i</td>
                            <td class="text-center">@student.Student.Code</td>
                            <td class="text-center">@student.Student.Name</td>
                            <td class="text-center">@student.Student.Email</td>
                            <td class="text-center">
                                <button class="btn btn-danger btn-sm" @onclick="() => RemoveStudent(student.StudentId)" aria-label="Remove student">Remove</button>
                            </td>
                        </tr>
                        i++;
                    }
                }
                else
                {
                    <tr>
                        <td colspan="5" class="text-center">No data available</td>
                    </tr>
                }
            </tbody>
        </table>
    </div>

    <style>
        .table {
            border-collapse: collapse;
            width: 100%;
        }

        .table-bordered {
            border: 1px solid #dee2e6;
        }

            .table-bordered th,
            .table-bordered td {
                border: 1px solid #dee2e6;
            }

        .table-striped tbody tr:nth-of-type(odd) {
            background-color: #f9f9f9;
        }

        .thead-dark th {
            background-color: #343a40;
            color: #fff;
        }

        .btn-danger {
            background-color: #dc3545;
            border-color: #dc3545;
        }

            .btn-danger:hover {
                background-color: #c82333;
                border-color: #bd2130;
            }

        .btn-sm {
            font-size: 0.875rem;
            padding: 0.25rem 0.5rem;
            border-radius: 0.2rem;
        }
    </style>

</div>


@code {
    Courses? courses;

    [SupplyParameterFromQuery]
    public int Id { get; set; }

    public List<StudentCourse> StudentCourses { get; set; } = new();

    protected override async Task OnInitializedAsync()
    {
        using var context = DbFactory.CreateDbContext();
        courses = await context.Courses
            .Include(m => m.Semester)
            .Include(m => m.Subject)
            .Include(m => m.Lecture)
            .FirstOrDefaultAsync(m => m.Id == Id);

        StudentCourses = await context.StudentCourses
    .Where(course => course.CourseId == Id)
    .Include(student => student.Student)
    .ToListAsync();

        if (courses is null)
        {
            NavigationManager.NavigateTo("notfound");
        }
    }


    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
               await Task.Delay(500);
        await JS.InvokeVoidAsync("initializeSelect2", Id);
        }
    }
    private async Task EnrollStudents()
    {
        var selectedStudentIds = await JS.InvokeAsync<string[]>("getSelectedValues", "studentSelect");

        if (selectedStudentIds != null && selectedStudentIds.Length > 0)
        {
            using var context = DbFactory.CreateDbContext();

            foreach (var studentId in selectedStudentIds)
            {
                var studentCourse = new StudentCourse
                {
                    CourseId = Id,
                    StudentId = studentId,
                    Grade = null // or set a default grade
                };

                context.StudentCourses.Add(studentCourse);
            }

            await context.SaveChangesAsync();

            // Reload the students list
            StudentCourses = await context.StudentCourses
                .Where(course => course.CourseId == Id)
                .Include(student => student.Student)
                .ToListAsync();
            await JS.InvokeVoidAsync("clearSelect2", "studentSelect");

            StateHasChanged(); // Refresh the UI
        }
    }
    private async Task RemoveStudent(string studentId)
    {
        using var context = DbFactory.CreateDbContext();

        var studentCourse = await context.StudentCourses
            .Where(sc => sc.StudentId == studentId && sc.CourseId == Id)
            .FirstOrDefaultAsync();

        if (studentCourse != null)
        {
            context.StudentCourses.Remove(studentCourse);
            await context.SaveChangesAsync();

            // Reload the students list
            StudentCourses = await context.StudentCourses
                .Where(course => course.CourseId == Id)
                .Include(student => student.Student)
                .ToListAsync();

            StateHasChanged(); // Refresh the UI
        }
    }

}