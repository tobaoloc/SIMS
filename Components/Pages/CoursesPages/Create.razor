@page "/courses/create"

@using Microsoft.EntityFrameworkCore
@using BlazorApp3.Models
@using BlazorApp3.Data
@inject IDbContextFactory<BlazorApp3.Data.ApplicationDbContext> DbFactory
@inject NavigationManager NavigationManager

<PageTitle>Create</PageTitle>

<h1>Create</h1>

<h4>Courses</h4>
<hr />
<div class="container mt-5">
    <h4 class="mb-3">Create Course</h4>
    <hr />
    <div class="row justify-content-center">
        <div class="col-md-8">
            <section class="card shadow-sm">
                <div class="card-body">
                    <EditForm method="post" Model="Courses" OnValidSubmit="AddCourses" FormName="create" Enhance>
                        <DataAnnotationsValidator />
                        <ValidationSummary class="text-danger" role="alert" />

                        <div class="form-floating mb-3">
                            <InputText id="name" @bind-Value="Courses.Name" class="form-control" placeholder="Course Name" />
                            <label for="name" class="form-label">Name:</label>
                            <ValidationMessage For="() => Courses.Name" class="text-danger" />
                        </div>

                        <div class="form-floating mb-3">
                            <InputDate id="startdate" @bind-Value="Courses.StartDate" class="form-control" />
                            <label for="startdate" class="form-label">Start Date:</label>
                            <ValidationMessage For="() => Courses.StartDate" class="text-danger" />
                        </div>

                        <div class="form-floating mb-3">
                            <InputDate id="enddate" @bind-Value="Courses.EndDate" class="form-control" />
                            <label for="enddate" class="form-label">End Date:</label>
                            <ValidationMessage For="() => Courses.EndDate" class="text-danger" />
                        </div>

                        <div class="form-floating mb-3">
                            <InputSelect id="semesterid" @bind-Value="Courses.SemesterId" class="form-control">
                                @foreach (var semester in Semesters)
                                {
                                    <option value="@semester.Id">@semester.Name</option>
                                }
                            </InputSelect>
                            <label for="semesterid" class="form-label">Semester:</label>
                            <ValidationMessage For="() => Courses.SemesterId" class="text-danger" />
                        </div>

                        <div class="form-floating mb-3">
                            <InputSelect id="lectureid" @bind-Value="Courses.LectureId" class="form-control">
                                @foreach (var lecture in Lectures)
                                {
                                    <option value="@lecture.Id">@lecture.Name</option>
                                }
                            </InputSelect>
                            <label for="lectureid" class="form-label">Lecture:</label>
                            <ValidationMessage For="() => Courses.LectureId" class="text-danger" />
                        </div>

                        <div class="form-floating mb-3">
                            <InputSelect id="subjectid" @bind-Value="Courses.SubjectId" class="form-control">
                                @foreach (var subject in Subjects)
                                {
                                    <option value="@subject.Id">@subject.Name</option>
                                }
                            </InputSelect>
                            <label for="subjectid" class="form-label">Subject:</label>
                            <ValidationMessage For="() => Courses.SubjectId" class="text-danger" />
                        </div>

                        <div class="d-grid mb-3">
                            <button type="submit" class="btn btn-primary btn-lg">Create</button>
                        </div>
                    </EditForm>
                </div>
            </section>
        </div>
    </div>

    <div class="text-center mt-4">
        <a href="/courses" class="text-decoration-none">Back to List</a>
    </div>
</div>

<style>
    body {
        background-color: #f8f9fa;
    }

    .card {
        border: none;
        border-radius: 10px;
    }

    .card-body {
        padding: 2rem;
    }

    .card-title {
        color: #333;
        font-weight: 600;
    }

    .btn-primary {
        background-color: #007bff;
        border-color: #007bff;
    }

        .btn-primary:hover {
            background-color: #0056b3;
            border-color: #0056b3;
        }

    .form-control:focus {
        border-color: #80bdff;
        box-shadow: 0 0 0 0.2rem rgba(0, 123, 255, 0.25);
    }

    .text-decoration-none {
        color: #007bff;
    }

        .text-decoration-none:hover {
            color: #0056b3;
            text-decoration: underline !important;
        }
</style>


@code {

    [SupplyParameterFromForm]
    public Courses Courses { get; set; } = new();
    public List<ApplicationUser> Lectures { get; set; } = new();
    public List<Semesters> Semesters { get; set; } = new();
    public List<Subjects> Subjects { get; set; } = new();
    protected override async Task OnInitializedAsync()
    {
        using var context = DbFactory.CreateDbContext();
        Lectures = await context.ApplicationUser.ToListAsync();
        Semesters = await context.Semesters.ToListAsync();
        Subjects = await context.Subjects.ToListAsync();
    }
    // To protect from overposting attacks, see https://aka.ms/RazorPagesCRUD
    public async Task AddCourses()
    {
        using var context = DbFactory.CreateDbContext();
        context.Courses.Add(Courses);
        await context.SaveChangesAsync();
        NavigationManager.NavigateTo("/courses");
    }
}
