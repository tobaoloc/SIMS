@page "/courses"

@using Microsoft.EntityFrameworkCore
@using BlazorApp3.Models
@inject IDbContextFactory<BlazorApp3.Data.ApplicationDbContext> DbFactory
@inject AuthenticationStateProvider AuthenticationStateProvider

<PageTitle>Courses</PageTitle>

<h1>Courses</h1>

@if (BlazorApp3.Components.Layout.NavMenu.isAdmin)
{
    <p>
        <a href="courses/create"><i class="fa-solid fa-square-plus"></i></a>
    </p>
}
<div class="table-responsive">
    <table class="table table-striped table-hover align-middle">
        <thead class="table-light">
            <tr>
                <th>Course Name</th>
                <th>Start Date</th>
                <th>End Date</th>
                <th>Semester</th>
                <th>Lecture</th>
                <th>Subject</th>
                <th>Actions</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var course in Courses)
            {
                <tr>
                    <td>@course.Name</td>
                    <td>@course.StartDate.ToShortDateString()</td>
                    <td>@course.EndDate.ToShortDateString()</td>
                    <td>@course.Semester.Name</td>
                    <td>@course.Lecture.Name</td>
                    <td>@course.Subject.Name</td>
                    <td>
                        <div class="d-flex flex-column flex-sm-row gap-2">
                            @if (BlazorApp3.Components.Layout.NavMenu.isAdmin)
                            {
                                <a href="@($"courses/edit?id={course.Id}")" class="btn btn-sm btn-outline-primary" title="Edit">
                                    <i class="fa-solid fa-pen-to-square"></i>
                                </a>
                                <a href="@($"courses/details?id={course.Id}")" class="btn btn-sm btn-outline-info" title="Details">
                                    <i class="fa-solid fa-circle-info"></i>
                                </a>
                                <a href="@($"courses/delete?id={course.Id}")" class="btn btn-sm btn-outline-danger" title="Delete">
                                    <i class="fa-solid fa-trash"></i>
                                </a>
                            }
                            <a href="@($"courses/assign?id={course.Id}")" class="btn btn-sm btn-outline-success">Assign students</a>
                            <a href="@($"courses/grade?id={course.Id}")" class="btn btn-sm btn-outline-warning">Add Grades</a>
                        </div>
                    </td>
                </tr>
            }
        </tbody>
    </table>
</div>
<style>
  .table-responsive {
    border-radius: 8px;
    box-shadow: 0 0 20px rgba(0, 0, 0, 0.1);
    overflow: hidden;
  }

  .table {
    margin-bottom: 0;
  }

  .table th {
    font-weight: 600;
    text-transform: uppercase;
    font-size: 0.875rem;
    letter-spacing: 0.5px;
  }

  .table td {
    vertical-align: middle;
  }

  .table-striped tbody tr:nth-of-type(odd) {
    background-color: rgba(0, 0, 0, 0.02);
  }

  .table-hover tbody tr:hover {
    background-color: rgba(0, 0, 0, 0.04);
  }

  .btn-sm {
    padding: 0.25rem 0.5rem;
    font-size: 0.875rem;
  }

  .btn-outline-primary,
  .btn-outline-info,
  .btn-outline-danger,
  .btn-outline-success,
  .btn-outline-warning {
    border-width: 2px;
  }

  .btn-outline-primary:hover,
  .btn-outline-info:hover,
  .btn-outline-danger:hover,
  .btn-outline-success:hover,
  .btn-outline-warning:hover {
    color: #fff;
  }

  
</style>

@code {
        private List<Courses> Courses { get; set; } = new List<Courses>();
private bool IsAdmin { get; set; }

protected override async Task OnInitializedAsync()
{
        using var context = DbFactory.CreateDbContext();

        Courses = await context.Courses
            .Include(m => m.Semester)
            .Include(m => m.Subject)
            .Include(m => m.Lecture)
            .ToListAsync();

        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;
        IsAdmin = user.Claims.Any(c => c.Type == "Role" && c.Value == "Admin");
}
}
