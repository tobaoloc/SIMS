@page "/Majors/edit"

@using Microsoft.EntityFrameworkCore
@using BlazorApp3.Models
@inject IDbContextFactory<BlazorApp3.Data.ApplicationDbContext> DbFactory
@inject NavigationManager NavigationManager

<PageTitle>Edit</PageTitle>

<h1><i class="fa-solid fa-pen-to-square"></i></h1>

<h4>Majors</h4>
<hr />
@if (Majors is null)
{
    <p><em>Loading...</em></p>
}
else
{
    <div class="container mt-5">
        <h4 class="mb-3">Edit Major</h4>
        <hr />
        <div class="row">
            <div class="col-md-4">
                <EditForm method="post" Model="Majors" OnValidSubmit="UpdateMajors" FormName="edit" Enhance>
                    <DataAnnotationsValidator />
                    <ValidationSummary />

                    <input type="hidden" name="Majors.Id" value="@Majors.Id" />

                    <div class="mb-3">
                        <label for="name" class="form-label">Name:</label>
                        <InputText id="name" @bind-Value="Majors.Name" class="form-control" />
                        <ValidationMessage For="() => Majors.Name" class="text-danger" />
                    </div>

                    <div class="mb-3">
                        <label for="departmentid" class="form-label">Department:</label>
                        <InputSelect id="departmentid" @bind-Value="Majors.DepartmentId" class="form-control">
                            @foreach (var department in Departments)
                            {
                                <option value="@department.Id">@department.Name</option>
                            }
                        </InputSelect>
                        <ValidationMessage For="() => Majors.DepartmentId" class="text-danger" />
                    </div>

                    <button type="submit" class="btn btn-primary">Save</button>
                </EditForm>
            </div>
        </div>
    </div>

    <style>
        body {
            background-color: #f8f9fa;
        }

        .container {
            padding: 2rem;
        }

        .form-control:focus {
            border-color: #80bdff;
            box-shadow: 0 0 0 0.2rem rgba(0, 123, 255, 0.25);
        }

        .form-label {
            font-weight: 600;
        }

        .btn-primary {
            background-color: #007bff;
            border-color: #007bff;
        }

            .btn-primary:hover {
                background-color: #0056b3;
                border-color: #004085;
            }

        .text-danger {
            color: #dc3545;
        }

        .mb-3 {
            margin-bottom: 1rem;
        }
    </style>

}

<div>
    <a href="/majors">Back to List</a>
</div>

@code {
    [SupplyParameterFromQuery]
    public int Id { get; set; }

    [SupplyParameterFromForm]
    public Majors? Majors { get; set; }
    public List<Departments> Departments { get; set; } = new();
    protected override async Task OnInitializedAsync()
    {
        using var context = DbFactory.CreateDbContext();
        Majors ??= await context.Majors.FirstOrDefaultAsync(m => m.Id == Id);
        Departments = await context.Departments.ToListAsync();
        if (Majors is null)
        {
            NavigationManager.NavigateTo("notfound");
        }
    }

    // To protect from overposting attacks, enable the specific properties you want to bind to.
    // For more details, see https://aka.ms/RazorPagesCRUD.
    public async Task UpdateMajors()
    {
        using var context = DbFactory.CreateDbContext();
        context.Attach(Majors!).State = EntityState.Modified;

        try
        {
            await context.SaveChangesAsync();
        }
        catch (DbUpdateConcurrencyException)
        {
            if (!MajorsExists(Majors!.Id))
            {
                NavigationManager.NavigateTo("notfound");
            }
            else
            {
                throw;
            }
        }

        NavigationManager.NavigateTo("/majors");
    }

    bool MajorsExists(int id)
    {
        using var context = DbFactory.CreateDbContext();
        return context.Majors.Any(e => e.Id == id);
    }
}
