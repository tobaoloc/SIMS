@page "/students/create"

@using Microsoft.EntityFrameworkCore
@using System.ComponentModel.DataAnnotations
@using System.Text
@using System.Text.Encodings.Web
@using Microsoft.AspNetCore.Identity
@using Microsoft.AspNetCore.WebUtilities
@using BlazorApp3.Data
@inject IUserStore<ApplicationUser> UserStore

@inject IDbContextFactory<BlazorApp3.Data.ApplicationDbContext> DbFactory
@inject NavigationManager NavigationManager
@using Microsoft.AspNetCore.Authorization
@inject UserManager<BlazorApp3.Data.ApplicationUser> UserManager

<PageTitle>Create</PageTitle>

<h1><i class="fa-solid fa-square-plus"></i></h1>

<h4>Student</h4>
<hr />
<div class="container mt-5">
    <h4 class="mb-3">Create Student</h4>
    <hr />
    <div class="row justify-content-center">
        <div class="col-md-8">
            <section class="card shadow-sm">
                <div class="card-body">
                    <EditForm method="post" Model="Students" OnValidSubmit="AddStudents" FormName="create" Enhance>
                        <DataAnnotationsValidator />
                        <ValidationSummary class="text-danger" role="alert" />

                        <div class="form-floating mb-3">
                            <InputText id="name" @bind-Value="Students.Name" class="form-control" placeholder="Student Name" />
                            <label for="name" class="form-label">Name:</label>
                            <ValidationMessage For="() => Students.Name" class="text-danger" />
                        </div>

                        <div class="form-floating mb-3">
                            <InputText id="code" @bind-Value="Students.Code" class="form-control" placeholder="Student Code" />
                            <label for="code" class="form-label">Code:</label>
                            <ValidationMessage For="() => Students.Code" class="text-danger" />
                        </div>

                        <div class="form-floating mb-3">
                            <InputText id="email" @bind-Value="Students.Email" class="form-control" placeholder="student@example.com" />
                            <label for="email" class="form-label">Email:</label>
                            <ValidationMessage For="() => Students.Email" class="text-danger" />
                        </div>

                        <div class="form-floating mb-3">
                            <InputText id="phone" @bind-Value="Students.PhoneNumber" class="form-control" placeholder="Phone Number" />
                            <label for="phone" class="form-label">Phone:</label>
                            <ValidationMessage For="() => Students.PhoneNumber" class="text-danger" />
                        </div>

                        <div class="form-floating mb-3">
                            <InputText id="password" @bind-Value="Students.PasswordHash" type="password" class="form-control" placeholder="Password" />
                            <label for="password" class="form-label">Password:</label>
                            <ValidationMessage For="() => Students.PasswordHash" class="text-danger" />
                        </div>

                        <div class="d-grid mb-3">
                            <button type="submit" class="btn btn-primary btn-lg">Create</button>
                        </div>
                    </EditForm>
                </div>
            </section>
        </div>
    </div>

    <div class="text-center mt-4">
        <a href="/students" class="text-decoration-none">Back to List</a>
    </div>
</div>

<style>
    body {
        background-color: #f8f9fa;
    }

    .card {
        border: none;
        border-radius: 10px;
    }

    .card-body {
        padding: 2rem;
    }

    .card-title {
        color: #333;
        font-weight: 600;
    }

    .btn-primary {
        background-color: #007bff;
        border-color: #007bff;
    }

        .btn-primary:hover {
            background-color: #0056b3;
            border-color: #0056b3;
        }

    .form-control:focus {
        border-color: #80bdff;
        box-shadow: 0 0 0 0.2rem rgba(0, 123, 255, 0.25);
    }

    .text-decoration-none {
        color: #007bff;
    }

        .text-decoration-none:hover {
            color: #0056b3;
            text-decoration: underline !important;
        }
</style>


@code {

    [SupplyParameterFromForm]
    public BlazorApp3.Data.ApplicationUser Students { get; set; } = new();

    // To protect from overposting attacks, see https://aka.ms/RazorPagesCRUD

    public async Task AddStudents()
    {
        var passwordHasher = new Microsoft.AspNetCore.Identity.PasswordHasher<Microsoft.AspNetCore.Identity.IdentityUser>();
        using var context = DbFactory.CreateDbContext();
        BlazorApp3.Data.ApplicationUser newStudent = new Data.ApplicationUser()
        {

            Code = Students.Code,
            Name = Students.Name,
            PhoneNumber = Students.PhoneNumber,
            Email = Students.Email,
            UserName = Students.Code,
            NormalizedEmail = Students.Email.ToUpper(),
            NormalizedUserName = Students.Code.ToUpper(),
            Role = "Student",
            LockoutEnabled = true
        };
        await UserStore.SetUserNameAsync(newStudent, Students.Email, CancellationToken.None);
        var emailStore = GetEmailStore();
        await emailStore.SetEmailAsync(newStudent, Students.Email, CancellationToken.None);
        await UserManager.CreateAsync(newStudent, Students.PasswordHash);

        NavigationManager.NavigateTo("/students");
    }
    private IUserEmailStore<ApplicationUser> GetEmailStore()
    {
        if (!UserManager.SupportsUserEmail)
        {
            throw new NotSupportedException("The default UI requires a user store with email support.");
        }
        return (IUserEmailStore<ApplicationUser>)UserStore;
    }
}
