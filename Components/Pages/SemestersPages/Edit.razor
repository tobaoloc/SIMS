@page "/Semesters/edit"

@using Microsoft.EntityFrameworkCore
@using BlazorApp3.Models
@inject IDbContextFactory<BlazorApp3.Data.ApplicationDbContext> DbFactory
@inject NavigationManager NavigationManager

<PageTitle>Edit</PageTitle>

<h1><i class="fa-solid fa-pen-to-square"></i></h1>

<h4>Semesters</h4>
<hr />
@if (Semesters is null)
{
    <p><em>Loading...</em></p>
}
else
{
    <div class="container mt-5">
        <h4 class="mb-3">Edit Semester</h4>
        <hr />
        <div class="row">
            <div class="col-md-6">
                <section class="card shadow-sm">
                    <div class="card-body">
                        <EditForm method="post" Model="Semesters" OnValidSubmit="UpdateSemesters" FormName="edit" Enhance>
                            <DataAnnotationsValidator />
                            <ValidationSummary class="text-danger" role="alert" />
                            <input type="hidden" name="Semesters.Id" value="@Semesters.Id" />
                            <div class="mb-3">
                                <label for="name" class="form-label">Name:</label>
                                <InputText id="name" @bind-Value="Semesters.Name" class="form-control" />
                                <ValidationMessage For="() => Semesters.Name" class="text-danger" />
                            </div>
                            <div class="mb-3">
                                <label for="startdate" class="form-label">Start Date:</label>
                                <InputDate id="startdate" @bind-Value="Semesters.StartDate" class="form-control" />
                                <ValidationMessage For="() => Semesters.StartDate" class="text-danger" />
                            </div>
                            <div class="mb-3">
                                <label for="enddate" class="form-label">End Date:</label>
                                <InputDate id="enddate" @bind-Value="Semesters.EndDate" class="form-control" />
                                <ValidationMessage For="() => Semesters.EndDate" class="text-danger" />
                            </div>
                            <button type="submit" class="btn btn-primary">Save</button>
                        </EditForm>
                    </div>
                </section>
            </div>
        </div>

    </div>

    <style>
        body {
            background-color: #f8f9fa;
        }

        .card {
            border: none;
            border-radius: 10px;
        }

        .card-body {
            padding: 2rem;
        }

        .form-label {
            font-weight: 600;
        }

        .form-control:focus {
            border-color: #80bdff;
            box-shadow: 0 0 0 0.2rem rgba(0, 123, 255, 0.25);
        }

        .btn-primary {
            background-color: #007bff;
            border-color: #007bff;
        }

            .btn-primary:hover {
                background-color: #0056b3;
                border-color: #0056b3;
            }

        .text-decoration-none {
            color: #007bff;
        }

            .text-decoration-none:hover {
                color: #0056b3;
                text-decoration: underline !important;
            }
    </style>

}

<div class="text-center mt-4">
    <a href="/semesters" class="text-decoration-none">Back to List</a>
</div>

@code {
    [SupplyParameterFromQuery]
    public int Id { get; set; }

    [SupplyParameterFromForm]
    public Semesters? Semesters { get; set; }

    protected override async Task OnInitializedAsync()
    {
        using var context = DbFactory.CreateDbContext();
        Semesters ??= await context.Semesters.FirstOrDefaultAsync(m => m.Id == Id);

        if (Semesters is null)
        {
            NavigationManager.NavigateTo("notfound");
        }
    }

    // To protect from overposting attacks, enable the specific properties you want to bind to.
    // For more details, see https://aka.ms/RazorPagesCRUD.
    public async Task UpdateSemesters()
    {
        using var context = DbFactory.CreateDbContext();
        context.Attach(Semesters!).State = EntityState.Modified;

        try
        {
            await context.SaveChangesAsync();
        }
        catch (DbUpdateConcurrencyException)
        {
            if (!SemestersExists(Semesters!.Id))
            {
                NavigationManager.NavigateTo("notfound");
            }
            else
            {
                throw;
            }
        }

        NavigationManager.NavigateTo("/semesters");
    }

    bool SemestersExists(int id)
    {
        using var context = DbFactory.CreateDbContext();
        return context.Semesters.Any(e => e.Id == id);
    }
}
